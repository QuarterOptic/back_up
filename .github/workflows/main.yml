name: 自动同步备份（强制兜底）
on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  backup:
    runs-on: ubuntu-latest
    steps:
      - name: 检查当前备份仓库
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.MY_GITHUB_TOKEN }}  # 确保用PAT权限，避免推送失败

      - name: 配置Git
        run: |
          git config --global user.name "QuarterOptic"
          git config --global user.email "sztao2000@icloud.com"

      - name: 同步目标仓库并强制生成备份
        run: |
          # 1. 提前创建backups根目录（第一步就确保存在）
          mkdir -p backups
          echo "已提前创建backups根目录"
          # 立即创建一个兜底文件，确保目录非空（即使后续步骤全失败）
          touch backups/.backup_marker  # 隐藏文件，不影响实际备份

          REPOS=(
            "https://github.com/blackmatrix7/ios_rule_script.git ios-rules rule/QuantumultX/Advertising/Advertising.list"
          )

          for repo_info in "${REPOS[@]}"; do
            REPO_URL=$(echo "$repo_info" | awk '{print $1}')
            CLONE_DIR=$(echo "$repo_info" | awk '{print $2}')
            TARGET_FILE=$(echo "$repo_info" | awk '{print $3}')
            FILE_NAME=$(basename "$TARGET_FILE")
            BACKUP_DIR="backups/$CLONE_DIR"
            
            echo "===== 处理仓库: $REPO_URL ====="
            echo "备份目录路径: $BACKUP_DIR"

            # 2. 克隆仓库（带详细错误提示）
            if [ -d "$CLONE_DIR/.git" ]; then
              echo "更新仓库..."
              cd "$CLONE_DIR" && git pull origin main && cd .. || {
                echo "❌ 拉取仓库失败，尝试重新克隆"
                rm -rf "$CLONE_DIR"
                git clone --depth 1 "$REPO_URL" "$CLONE_DIR" || echo "❌ 重新克隆也失败"
              }
            else
              echo "克隆仓库..."
              git clone --depth 1 "$REPO_URL" "$CLONE_DIR" || echo "❌ 克隆仓库失败"
            fi

            # 3. 强制创建子目录并生成文件
            mkdir -p "$BACKUP_DIR" || echo "❌ 创建备份子目录失败"
            LOCAL_TARGET="$CLONE_DIR/$TARGET_FILE"
            if [ -f "$LOCAL_TARGET" ]; then
              cp -f "$LOCAL_TARGET" "$BACKUP_DIR/$FILE_NAME" || echo "❌ 复制文件失败"
              echo "✅ 复制文件到: $BACKUP_DIR/$FILE_NAME"
            else
              touch "$BACKUP_DIR/$FILE_NAME" || echo "❌ 创建空文件失败"
              echo "⚠️ 创建空文件到: $BACKUP_DIR/$FILE_NAME"
            fi

            # 4. 验证子目录内容
            echo "备份子目录内容:"
            ls -l "$BACKUP_DIR" || echo "❌ 查看子目录失败（可能不存在）"

            rm -rf "$CLONE_DIR"
          done

          # 5. 最终验证backups根目录（关键！）
          echo "===== 最终检查backups根目录 ====="
          echo "当前工作目录: $(pwd)"  # 确认是否在仓库根目录
          echo "backups目录是否存在: $(if [ -d "backups" ]; then echo "是"; else echo "否"; fi)"
          echo "backups目录内容:"
          ls -l backups/  # 列出所有文件，确认有内容（至少有.backup_marker）

      - name: 提交备份（最终兜底）
        run: |
          # 再次确保backups目录存在（万无一失）
          mkdir -p backups
          touch backups/.last_commit  # 每次提交都更新这个文件，确保有变化
          
          git add backups/
          # 强制提交，即使Git认为没有变化
          git commit --allow-empty -m "自动备份: $(date +'%Y-%m-%d %H:%M:%S')"
          git push origin main
    
